{"version":3,"sources":["client.js","components/AllPosts.js","components/OnePost.js","App.js","serviceWorker.js","index.js"],"names":["sanityClient","projectId","dataset","useCdn","AllPosts","useState","allPostsData","setAllPosts","useEffect","fetch","then","data","catch","console","error","log","className","map","post","index","to","slug","current","key","src","mainImage","asset","url","alt","title","builder","imageUrlBuilder","urlFor","source","image","OnePost","postData","setPostData","useParams","serializers","types","youtube","node","id","getYouTubeId","videoId","authorImage","name","style","height","blocks","body","clientConfig","App","component","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uMAEeA,E,MAAAA,GAAa,CAC1BC,UAAW,WACXC,QAAS,aACTC,QAAQ,ICDK,SAASC,IAAY,IAAD,EACGC,mBAAS,MADZ,mBAC1BC,EAD0B,KACZC,EADY,KAuBjC,OApBAC,qBAAU,WACRR,EACGS,MADH,sMAaGC,MAAK,SAACC,GAAD,OAAUJ,EAAYI,MAC3BC,MAAMC,QAAQC,SAChB,IAEHD,QAAQE,IAAIT,GAGV,yBAAKU,UAAU,oBACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,wCAAd,aACA,wBAAIA,UAAU,mDAAd,cAIA,yBAAKA,UAAU,4CACZV,GACCA,EAAaW,KAAI,SAACC,EAAMC,GAAP,OACf,kBAAC,IAAD,CAAMC,GAAI,IAAMF,EAAKG,KAAKC,QAASC,IAAKL,EAAKG,KAAKC,SAChD,0BACEN,UAAU,uFACVO,IAAKJ,GAEL,yBACEH,UAAU,gDACVQ,IAAKN,EAAKO,UAAUC,MAAMC,IAC1BC,IAAI,KAEN,0BAAMZ,UAAU,8DACd,wBAAIA,UAAU,2FACXE,EAAKW,gB,+DC1CtBC,EAAUC,IAAgB/B,GAChC,SAASgC,EAAOC,GACd,OAAOH,EAAQI,MAAMD,GAGR,SAASE,IAAW,IAAD,EACA9B,mBAAS,MADT,mBACzB+B,EADyB,KACfC,EADe,KAExBhB,EAASiB,cAATjB,KAuBR,GArBAb,qBAAU,WACRR,EACGS,MADH,6BAE0BY,EAF1B,wRAgBGX,MAAK,SAACC,GAAD,OAAU0B,EAAY1B,EAAK,OAChCC,MAAMC,QAAQC,SAChB,CAACO,KAECe,EAAU,OAAO,2CAEtB,IAAMG,EAAc,CAClBC,MAAO,CACLC,QAAS,YAAa,IACZd,EADW,EAAVe,KACDf,IACFgB,EAAKC,IAAajB,GACxB,OAAQ,kBAAC,IAAD,CAASkB,QAASF,OAKhC,OACE,yBAAK3B,UAAU,4BACb,yBAAKA,UAAU,0CACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,+DAEb,yBAAKA,UAAU,uCACb,wBAAIA,UAAU,qCACXoB,EAASP,OAEZ,yBAAKb,UAAU,qCACb,yBACEQ,IAAKQ,EAAOI,EAASU,aAAanB,MAClCX,UAAU,yBACVY,IAAI,kBAEN,wBAAIZ,UAAU,2CACXoB,EAASW,SAKlB,yBACE/B,UAAU,gCACVQ,IAAKQ,EAAOI,EAASX,WAAWE,MAChCC,IAAI,GACJoB,MAAO,CAAEC,OAAQ,YAGrB,yBAAKjC,UAAU,6EACb,kBAAC,IAAD,CACEkC,OAAQd,EAASe,KACjBlD,UAAWD,EAAaoD,aAAanD,UACrCC,QAASF,EAAaoD,aAAalD,QACnCqC,YAAaA,OCpEVc,MAXf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,UAAWlD,EAAUmD,KAAK,IAAIC,OAAK,IAC1C,kBAAC,IAAD,CAAOF,UAAWnB,EAASoB,KAAK,cCEpBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEd3D,OAAM,SAAAE,GACLD,QAAQC,MAAMA,EAAM0D,a","file":"static/js/main.3dd46b79.chunk.js","sourcesContent":["import sanityClient from \"@sanity/client\";\r\n\r\nexport default sanityClient({\r\n  projectId: \"hvicqgfx\", // find this at manage.sanity.io, run `sanity init` to initialize\r\n  dataset: \"production\", // this is from when we answered those question from 'sanity init'\r\n  useCdn: true,\r\n});\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport sanityClient from \"../client.js\";\r\n\r\nexport default function AllPosts() {\r\n  const [allPostsData, setAllPosts] = useState(null);\r\n\r\n  useEffect(() => {\r\n    sanityClient\r\n      .fetch(\r\n        `*[_type == \"post\"]{\r\n            title,\r\n            slug,\r\n            mainImage{\r\n              asset->{\r\n                _id,\r\n                url\r\n              }\r\n            }\r\n          }`\r\n      )\r\n      .then((data) => setAllPosts(data))\r\n      .catch(console.error);\r\n  }, []);\r\n\r\n  console.log(allPostsData);\r\n\r\n  return (\r\n    <div className=\"min-h-screen p-5\">\r\n      <div className=\"container mx-auto\">\r\n        <h2 className=\"text-5xl flex justify-center cursive\">Alejandro</h2>\r\n        <h3 className=\"text-lg text-gray-600 flex justify-center mb-12\">\r\n          awa de uwu\r\n        </h3>\r\n\r\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\r\n          {allPostsData &&\r\n            allPostsData.map((post, index) => (\r\n              <Link to={\"/\" + post.slug.current} key={post.slug.current}>\r\n                <span\r\n                  className=\"block h-64 relative rounded shadow leading-snug bg-white border-l-8 border-green-400\"\r\n                  key={index}\r\n                >\r\n                  <img\r\n                    className=\"w-full h-full rounded-r object-cover absolute\"\r\n                    src={post.mainImage.asset.url}\r\n                    alt=\"\"\r\n                  />\r\n                  <span className=\"block relative h-full flex justify-end items-end pr-4 pb-4\">\r\n                    <h2 className=\"text-gray-800 text-lg font-bold px-3 py-4 bg-red-700 text-red-100 bg-opacity-75 rounded\">\r\n                      {post.title}\r\n                    </h2>\r\n                  </span>\r\n                </span>\r\n              </Link>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport sanityClient from \"../client.js\";\r\nimport BlockContent from \"@sanity/block-content-to-react\";\r\nimport imageUrlBuilder from \"@sanity/image-url\";\r\nimport getYouTubeId from 'get-youtube-id';\r\nimport YouTube from 'react-youtube';\r\n\r\nconst builder = imageUrlBuilder(sanityClient);\r\nfunction urlFor(source) {\r\n  return builder.image(source);\r\n}\r\n\r\nexport default function OnePost() {\r\n  const [postData, setPostData] = useState(null);\r\n  const { slug } = useParams();\r\n\r\n  useEffect(() => {\r\n    sanityClient\r\n      .fetch(\r\n        `*[slug.current == \"${slug}\"]{\r\n            title,\r\n            slug,\r\n            mainImage{\r\n              asset->{\r\n                _id,\r\n                url\r\n              }\r\n            },\r\n            body,\r\n            \"name\": author->name,\r\n            \"authorImage\": author->image\r\n          }`\r\n      )\r\n      .then((data) => setPostData(data[0]))\r\n      .catch(console.error);\r\n  }, [slug]);\r\n\r\n  if (!postData) return <div>Loading...</div>;\r\n\r\n  const serializers = {\r\n    types: {\r\n      youtube: ({node}) => {\r\n        const { url } = node\r\n        const id = getYouTubeId(url)\r\n        return (<YouTube videoId={id} />)\r\n      }\r\n    }\r\n}\r\n\r\n  return (\r\n    <div className=\"bg-gray-200 min-h-screen\">\r\n      <div className=\"container shadow-lg mx-auto rounded-lg\">\r\n        <div className=\"relative\">\r\n          <div className=\"absolute h-full w-full flex items-center justify-center p-8\">\r\n            {/* Title Section */}\r\n            <div className=\"bg-white bg-opacity-75 rounded p-12\">\r\n              <h2 className=\"cursive text-3xl lg:text-6xl mb-4\">\r\n                {postData.title}\r\n              </h2>\r\n              <div className=\"flex justify-center text-gray-800\">\r\n                <img\r\n                  src={urlFor(postData.authorImage).url()}\r\n                  className=\"w-10 h-10 rounded-full\"\r\n                  alt=\"Author is Kap\"\r\n                />\r\n                <h4 className=\"cursive flex items-center pl-2 text-2xl\">\r\n                  {postData.name}\r\n                </h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <img\r\n            className=\"w-full object-cover rounded-t\"\r\n            src={urlFor(postData.mainImage).url()}\r\n            alt=\"\"\r\n            style={{ height: \"400px\" }}\r\n          />\r\n        </div>\r\n        <div className=\"px-8 lg:px-48 py-12 lg:py-20 prose lg:prose-xl max-w-full embed-container\">\r\n          <BlockContent\r\n            blocks={postData.body}\r\n            projectId={sanityClient.clientConfig.projectId}\r\n            dataset={sanityClient.clientConfig.dataset}\r\n            serializers={serializers}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport AllPosts from \"./components/AllPosts.js\";\r\nimport OnePost from \"./components/OnePost.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <div>\r\n        <Route component={AllPosts} path=\"/\" exact />\r\n        <Route component={OnePost} path=\"/:slug\" />\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}